<?xml version="1.0" encoding="utf-8"?>
<!-- Test Schema -->
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
	xmlns:m="http://mozile.mozdev.org/ns/mes/1.0">

<m:define name="Inline">
	<m:command name="strong" class="Wrap" element="b" accel="Command-B"
		label="Bold" image="silk/text_bold" tooltip="Make text bold"/>
	<m:command name="em" class="Wrap" element="i" accel="Command-I"
		label="Italic" image="silk/text_italic" tooltip="Italicize text"/>
	<m:command name="underline" class="Wrap" accel="Command-U" element="u" 
		label="Underline" image="silk/text_underline" tooltip="Underline text"/>
	<m:command name="strikethrough" class="Wrap" element="strike"
		label="Strikethrough" image="silk/text_strikethrough" tooltip="Strikethrough text"/>
	<m:command name="superscript" class="Wrap" element="sup"
		label="Superscript" image="silk/text_superscript" tooltip="Raise text"/>
	<m:command name="subscript" class="Wrap" element="sub"
		label="Subscript" image="silk/text_subscript" tooltip="Lower text"/>

	<m:command name="link" class="Insert" element="a" remove="false"
		label="Link" image="silk/link_add" tooltip="Create hyperlink">
		<m:script>
			<![CDATA[
			this.prompt = function(event, state) {
				if(!state || !state.element) return false;
				var href = prompt("What is the URL for this link?", "");
				if(!href) return false;
				state.element.setAttribute("href", href);
				return true;
			}
			]]>
		</m:script>
	</m:command>
	<m:command name="unlink" class="Unwrap" target="localName a"
		label="Remove Link" image="silk/link_break" tooltip="Remove hyperlinks"/>


	<m:group name="formats"
		label="Formats" image="silk/text_heading_1" tooltip="Select a format">

		<m:command name="paragraph" class="Replace" element="p" target="block"
			label="Paragraph" image="silk/pilcrow" tooltip="Use a paragraph"/>
		<m:command name="h1" class="Replace" element="div" className="heading1" target="block" accel="Command-1"
			label="Heading 1" image="silk/text_heading_1" tooltip="Use a first level heading"/>
		<m:command name="h2" class="Replace" element="div" className="heading2" target="block" accel="Command-2"
			label="Heading 2" image="silk/text_heading_2" tooltip="Use a second level heading"/>
		<m:command name="h3" class="Replace" element="div" className="heading3" target="block" accel="Command-3"
			label="Heading 3" image="silk/text_heading_3" tooltip="Use a third level heading"/>
		<m:command name="nowiki" class="Replace" element="p" className="nowiki" target="block"
			label="Nowiki" tooltip="Use a nowiki block"/>
		<m:command name="pre" class="Replace" element="pre" target="block"
			label="Pre-formatted" tooltip="Use pre-formatted text."/>
		<m:command name="center" class="Replace" element="center" target="block"
			label="Center" tooltip="Center the text."/>
		<m:command name="blockquote" class="Replace" element="blockquote" target="block"
			label="Blockquote" tooltip="Use a blockquote."/>
		<m:command name="listitem" class="Replace" element="li" target="block"
			label="List Item" tooltip="Use list item."/>
		<m:command name="unformat" class="Unwrap" target="block"
			label="Unformat" tooltip="Remove formatting"/>

	</m:group>

	<m:group name="insertion"
		label="Insert Objects" image="silk/photo_add" tooltip="Insert objects">

		<m:command name="image" class="Insert" element="img"
			label="Image" image="silk/photo_add" tooltip="Insert an image">
			<m:script>
				<![CDATA[
				this.prompt = function(event, state) {
					if(!state || !state.element) return false;
					var src = prompt("What is the URL for this image?", "");
					if(!src) return false;
					state.element.setAttribute("src", src);
					return true;
				}
				]]>
			</m:script>
		</m:command>

		<m:command name="lineBreak" class="Insert" element="br" accel="Shift-Return"
			label="Line-Break" tooltip="Insert a line-break"/>
		<m:command name="hr" class="Insert" element="hr"
			label="Horizontal Rule" image="silk/text_horizontalrule" tooltip="Insert a horizontal rule"/>
		<m:command name="unorderedList" class="Insert"
			label="Unordered List" image="silk/text_list_bullets" tooltip="Insert an unordered list">
			<m:script>
				<![CDATA[
				this.element = mozile.dom.createElement("ul");
				var li = mozile.dom.createElement("li");
				li.appendChild(document.createTextNode(mozile.emptyToken));
				this.element.appendChild(li);
				]]>
			</m:script>
		</m:command>
		<m:command name="orderedList" class="Insert"
			label="Ordered List" image="silk/text_list_numbers" tooltip="Insert an ordered list">
			<m:script>
				<![CDATA[
				this.element = mozile.dom.createElement("ol");
				var li = mozile.dom.createElement("li");
				li.appendChild(document.createTextNode(mozile.emptyToken));
				this.element.appendChild(li);
				]]>
			</m:script>
		</m:command>

		<m:command name="style" class="Command"
			label="Change Style" image="" tooltip="Change the element's style">
			<m:script>
				<![CDATA[  
				// Find the target and get the new style.
				this.prompt = function(event, state) {
					var selection = mozile.dom.selection.get();
					if(!selection) return false;
					var range = selection.getRangeAt(0);
					if(!range) return false;
					var target = range.commonAncestorContainer;
					if(!target) return false;
					if(target.nodeType == mozile.dom.TEXT_NODE) target = target.parentNode;
					state.target = target;
					state.oldStyle = "";
					if(mozile.browser.isIE) {
						if(target.style.cssText) state.oldStyle = target.style.cssText;
					}
					else if(target.getAttribute("style")) {
						state.oldStyle = target.getAttribute("style");
					}
					var style = prompt("What should the style of the element '"+ target.nodeName +"' be?", state.oldStyle);
					if(style) {
						state.newStyle = style;
						return true;
					}
					return false;
				}
				this.execute = function(state, fresh) {
					if(mozile.browser.isIE) {
						state.target.style.cssText = state.newStyle;
					}
					else state.target.setAttribute("style", state.newStyle);
					state.executed = true;
					return state;
				}
				this.unexecute = function(state, fresh) {
					if(mozile.browser.isIE) {
						state.target.style.cssText = state.oldStyle;
					}
					else state.target.setAttribute("style", state.oldStyle);
					state.executed = false;
					return state;
				}
				]]>
			</m:script>
		</m:command>

		<m:command name="attribute" class="Command" accel="Command-Shift-A"
			label="Change an Attribute" image="" tooltip="Change an attribute of the element">
			<m:script>
				<![CDATA[  
				// Find the target and get the new style.
				this.prompt = function(event, state) {
					var selection = mozile.dom.selection.get();
					if(!selection) return false;
					var range = selection.getRangeAt(0);
					if(!range) return false;
					var target = range.commonAncestorContainer;
					if(!target) return false;
					if(target.nodeType == mozile.dom.TEXT_NODE) target = target.parentNode;
					state.target = target;
					var attr = prompt("What attribute of the element '"+ target.nodeName +"' should be changed?", "");
					if(!attr) return false;
					state.attr = attr;
					state.oldValue = "";
					if(attr.toLowerCase() == "style" && mozile.browser.isIE) {
						if(target.style.cssText) state.oldValue = target.style.cssText;
					}
					else if(target.getAttribute(attr)) {
						state.oldValue = target.getAttribute(attr);
					}
					var value = prompt("What should the value of '"+ attr +"' be?", state.oldValue);
					if(value) {
						state.newValue = value;
						return true;
					}
					return false;
				}
				this.execute = function(state, fresh) {
					if(state.attr.toLowerCase() == "style" && mozile.browser.isIE) {
						state.target.style.cssText = state.newValue;
					}
					else state.target.setAttribute(state.attr, state.newValue);
					state.executed = true;
					return state;
				}
				this.unexecute = function(state, fresh) {
					if(state.attr.toLowerCase() == "style" && mozile.browser.isIE) {
						state.target.style.cssText = state.oldValue;
					}
					else state.target.setAttribute(state.attr, state.oldValue);
					state.executed = false;
					return state;
				}
				]]>
			</m:script>
		</m:command>

	</m:group>

</m:define>


<define name="Common.attrib">
	<optional>
		<attribute name="id"/>
	</optional>
	<!--<ref name="Core.attrib"/>
	<ref name="I18n.attrib"/>-->
</define>

<define name="br">
	<element name="br">
		<!--<ref name="Core.attrib"/>-->
		<ref name="Common.attrib"/>
		<empty/>
	</element>
</define>

<define name="span">
	<element name="span">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="a">
	<element name="a">
		<ref name="a.attlist"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="a.attlist">
	<ref name="Common.attrib"/>
	<optional>
		<attribute name="href">
			<ref name="URI.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="charset">
			<ref name="Charset.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="type">
			<ref name="ContentType.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="hreflang">
			<ref name="LanguageCode.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="rel">
			<ref name="LinkTypes.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="rev">
			<ref name="LinkTypes.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="accesskey">
			<ref name="Character.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="tabindex">
			<ref name="Number.datatype"/>
		</attribute>
	</optional>
</define>

<!--
<define name="abbr">
	<element name="abbr">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="acronym">
	<element name="acronym">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="cite">
	<element name="cite">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>
-->

<define name="code">
	<element name="code">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<!--
<define name="dfn">
	<element name="dfn">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>
-->

<define name="em">
	<element name="em">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="i">
	<element name="i">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<!--
<define name="kbd">
	<element name="kbd">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="q">
	<element name="q">
		<ref name="q.attlist"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="q.attlist">
	<ref name="Common.attrib"/>
	<optional>
		<attribute name="cite">
			<ref name="URI.datatype"/>
		</attribute>
	</optional>
</define>

<define name="samp">
	<element name="samp">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>
-->

<define name="strong">
	<element name="strong">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="b">
	<element name="b">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="u">
	<element name="u">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="s">
	<element name="s">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="sub">
	<element name="sub">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="sup">
	<element name="sup">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<!--
<define name="var">
	<element name="var">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>
-->

<define name="div">
	<element name="div">
		<ref name="Common.attrib"/>
		<ref name="Flow.model"/>
	</element>
</define>

<define name="p">
	<element name="p">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="center">
	<element name="center">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<!--
<define name="address">
	<element name="address">
		<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>
-->

<define name="blockquote">
	<element name="blockquote">
		<ref name="blockquote.attlist"/>
		<ref name="Block.model"/>
	</element>
</define>

<define name="blockquote.attlist">
	<ref name="Common.attrib"/>
	<optional>
		<attribute name="cite">
			<ref name="URI.datatype"/>
		</attribute>
	</optional>
</define>

<define name="pre">
	<element name="pre">
		<ref name="pre.attlist"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="pre.attlist">
	<ref name="Common.attrib"/>
	<optional>
		<attribute name="xml:space">
			<value>preserve</value>
		</attribute>
	</optional>
</define>

<define name="h1">
	<element name="h1">
		<ref name="Heading.attrib"/>
		<ref name="Heading.content"/>
	</element>
</define>
 
<define name="h2">
	<element name="h2">
		<ref name="Heading.attrib"/>
		<ref name="Heading.content"/>
	</element>
</define>
 
<define name="h3">
	<element name="h3">
		<ref name="Heading.attrib"/>
		<ref name="Heading.content"/>
	</element>
</define>
 
<define name="h4">
	<element name="h4">
		<ref name="Heading.attrib"/>
		<ref name="Heading.content"/>
	</element>
</define>
 
<define name="h5">
	<element name="h5">
		<ref name="Heading.attrib"/>
		<ref name="Heading.content"/>
	</element>
</define>

<define name="h6">
	<element name="h6">
		<ref name="Heading.attrib"/>
		<ref name="Heading.content"/>
	</element>
</define>

<define name="Heading.attrib">
	<ref name="Common.attrib"/>
</define>
 
<define name="Heading.content">
	<ref name="Inline.model"/>
</define>

<define name="Heading.class">
	<choice>
		<ref name="h1"/>
		<ref name="h2"/>
		<ref name="h3"/>
		<ref name="h4"/>
		<ref name="h5"/>
		<ref name="h6"/>
	</choice>
</define>

<define name="Block.class">
	<choice>
		<!--<ref name="address"/>-->
		<ref name="blockquote"/>
		<ref name="center"/>
		<ref name="div"/>
		<ref name="p"/>
		<ref name="pre"/>
		<ref name="Heading.class"/>
		<ref name="hr"/>
		<ref name="br"/>
	</choice>
</define>

<define name="Inline.class">
	<choice>
		<ref name="a"/>
		<!--
		<ref name="abbr"/>
		<ref name="acronym"/>
		-->
		<ref name="br"/>
		<!--
		<ref name="cite"/>
		-->
		<ref name="code"/>
		<!--
		<ref name="dfn"/>
		-->
		<ref name="em"/>
		<!--
		<ref name="kbd"/>
		<ref name="q"/>
		<ref name="samp"/>
		-->
		<ref name="span"/>
		<ref name="strong"/>
		<ref name="sub"/>
		<ref name="sup"/>
		<!--
		<ref name="var"/>
		-->
		<ref name="br"/>
		<!-- Added -->
		<ref name="img"/>
	</choice>
</define>

<define name="Inline.model">
	<m:ref name="Inline"/>
	<zeroOrMore>
		<choice>
			<text/>
			<ref name="Inline.class"/>
		</choice>
	</zeroOrMore>
</define>

<!-- This is redefined by the legacy module to include inlines. -->
<define name="Block.mix">
	<ref name="Block.class"/>
</define>

<define name="Block.model">
	<oneOrMore>
		<ref name="Block.mix"/>
	</oneOrMore>
</define>

<define name="Flow.model">
	<m:ref name="Inline"/>
	<zeroOrMore>
		<choice>
			<!--<text/>-->
			<ref name="Inline.class"/>
			<ref name="Block.class"/>
		</choice>
	</zeroOrMore>
</define>

<define name="dl">
	<element name="dl">
		<ref name="Common.attrib"/>
		<oneOrMore>
			<choice>
	<ref name="dt"/>
	<ref name="dd"/>
			</choice>
		</oneOrMore>
	</element>
</define>

<define name="dt">
	<element name="dt">
	<ref name="Common.attrib"/>
		<ref name="Inline.model"/>
	</element>
</define>

<define name="dd">
	<element name="dd">
		<ref name="Common.attrib"/>
		<ref name="Flow.model"/>
	</element>
</define>

<define name="ol">
	<element name="ol">
		<ref name="Common.attrib"/>
		<oneOrMore>
			<ref name="li"/>
		</oneOrMore>
	</element>
</define>

<define name="ul">
	<element name="ul">
		<ref name="Common.attrib"/>
		<oneOrMore>
			<ref name="li"/>
		</oneOrMore>
	</element>
</define>

<define name="li">
	<element name="li">
		<ref name="Common.attrib"/>
		<!--<ref name="Flow.model"/>-->
		<ref name="Inline.model"/>
	</element>
</define>

<define name="List.class">
	<choice>
		<ref name="ul"/>
		<ref name="ol"/>
		<ref name="dl"/>
	</choice>
</define>

<define name="Block.class" combine="choice">
	<ref name="List.class"/>
</define>

<define name="img">
	<element name="img">
		<ref name="img.attlist"/>
	</element>
</define>

<define name="img.attlist">
	<ref name="Common.attrib"/>
	<attribute name="src">
		<ref name="URI.datatype"/>
	</attribute>
	<attribute name="alt">
		<ref name="Text.datatype"/>
	</attribute>
	<optional>
		<attribute name="longdesc">
			<ref name="URI.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="height">
			<ref name="Length.datatype"/>
		</attribute>
	</optional>
	<optional>
		<attribute name="width">
			<ref name="Length.datatype"/>
		</attribute>
	</optional>
</define>

<define name="hr">
	<element name="hr">
		<ref name="Common.attrib"/>
	</element>
</define>

</grammar>