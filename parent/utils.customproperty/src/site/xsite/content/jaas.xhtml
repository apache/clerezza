<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us">
	<head>
		<title>JAAS Permissions</title>
	</head>
	<body>
		<h1>Usage: How to work with JAAS permissions in the CMS</h1>
		<p>Author: Daniel Spicar - clerezza.org</p>
		<p>Date: January 29, 2009</p>
		<h2 id="syntax">1. Permission Classes and Syntax</h2>
        <p>
            The permission classes represent access to system resources. [<a href="#ref1">1</a>]
            Internally they are represented as classes. In this document we will not
            go into the details of how to program with them but rather how to use them
            in the CMS from an administrator's perspective.
            <br />
            <br />
            Basically a permission has this following syntax
        </p>
        <code>(fully.qualified.class.name "/path/to/ressource" "actions")</code>
        <p>
            Example: <code>(java.io.FilePermission "/home/john/businessplan", "read")</code>
        </p>
        <ul>
            <li>
               <i>fully qualified name</i> is the name of a Java class,
                here: <i>java.io.FilePermission</i>
            </li>
            <li>
                <i>/path/to/ressource</i> is the file <i>businessplan</i> in the example.
            </li>
            <li>
                There is only a single action in the example. It is <i>read</i>. 
            </li>
        </ul>
        <p>
            It is easy to see that this permission would grant a user that has
            it the right to <i>read</i> the file <i>businessplan</i> located in the
            directory <i>/home/john/</i>.
        </p>
        <p>
            In the <i>ressource path</i> wildcards and special symbols can be used.
            Their interpretation depends on the permission.
            For <i>FilePermission</i> the wildcards are:
            <ul>
                <li>/some/directory/* - all files in /some/directory/</li>
                <li>/some/directory/- - all files in the file system under /some/directory/</li>
                <li>"&lt;&lt;ALL FILES&gt;&gt;" - all files in the file system</li>
            </ul>

            The available symbols for standard Java permissions and their interpretation can be found in the
            Java Security Architecture document. [<a href="#ref1">1</a>]
        </p>
        <p>
            The <i>actions</i> that are possible depend on the permission.
            For <i>FilePermission</i> the possible actions are:
            <ul>
                <li>read (read on a directory only grants the right to list the directory content)</li>
                <li>write</li>
                <li>delete</li>
                <li>execute</li>
            </ul>
           The available <i>actions</i> for standard Java permissions can be found in the
           Java Security Architecture document. [<a href="#ref1">1</a>]
        </p>

        <h2 id="clerezza">2. TC permissions</h2>
        <p>
            Clerezza uses its own custom permission for access to <i>TripleCollection</i>s. 
            The permission class is <i>org.apache.clerezza.rdf.core.access.security.TcPermission</i>.
            As a ressource it expects an URI. The possible actions are:
            <ul>
                <li>read</li>
                <li>readwrite</li>
            </ul>
            Example:
        </p>
        <code>(org.apache.clerezza.rdf.core.access.security.TcPermission "urn:x-localinstance:/system.graph" "readwrite")</code>
        
        <h2 id="references" >3. References</h2>
        <p id="ref1">
            [1] Java Security Architecture, Chapter 3, <a href="http://java.sun.com/javase/6/docs/technotes/guides/security/spec/security-spec.doc3.html" target="_blank">
                http://java.sun.com/javase/6/docs/technotes/guides/security/spec/security-spec.doc3.html
            </a>
        </p>
    </body>
</html>

