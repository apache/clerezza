/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/

def permission(s: Any) = new UriRef("http://clerezza.org/2008/10/permission#" + s)
def umr(s: Any) = new UriRef("http://clerezza.org/2009/05/usermanager#" + s)
def platform(s: Any) = new UriRef("http://clerezza.org/2009/08/platform#" + s)
def dct(s: Any) = new UriRef("http://purl.org/dc/terms/" + s)
def sioc(s: Any) = new UriRef("http://rdfs.org/sioc/ns#" + s)

resultDocModifier.addStyleSheet("/yui/2/container/assets/container-core.css");

resultDocModifier.addScriptReference("/yui/2/yahoo-dom-event/yahoo-dom-event.js");
resultDocModifier.addScriptReference("/yui/2/element/element-min.js");
resultDocModifier.addScriptReference("/yui/2/container/container-min.js");
resultDocModifier.addScriptReference("/yui/2/resize/resize-min.js")

resultDocModifier.addScriptReference("/scripts/alert-message.js");
resultDocModifier.addScriptReference("/scripts/ajax-options.js");
resultDocModifier.addScriptReference("js/usermanager-user-permission.js");

resultDocModifier.setTitle("Users");
resultDocModifier.addNodes2Elem("tx-module", <h1>Users</h1>);

resultDocModifier.addNodes2Elem("tx-module-tabs-ol", <li class="tx-active"><a href="#">Users</a></li>);
resultDocModifier.addNodes2Elem("tx-module-tabs-ol", <li><a href="list-roles">Roles</a></li>);

resultDocModifier.addNodes2Elem("tx-contextual-buttons-ol", <li><a id="backButton" class="tx-button tx-button-generic" href="list-users">Back to Overview</a></li>);
resultDocModifier.addNodes2Elem("tx-contextual-buttons-ol", <li><a id="saveButton" class="tx-button tx-button-create tx-inactive" href="#">Save Permissions</a></li>);

var allAvailablePermissions = "";
for (perm <- (context/platform("user")/permission("hasPermission"))) {
	allAvailablePermissions = allAvailablePermissions + "," + (perm/permission("javaPermissionEntry")*)
}

for(role <- (context/platform("user")/sioc("has_function"))) {
	for (perm <- (role/permission("hasPermission"))) {
		allAvailablePermissions = allAvailablePermissions + "," + (perm/permission("javaPermissionEntry")*)
	}
}

val userHasAllPermissions = allAvailablePermissions.contains("(java.security.AllPermission \"\" \"\")");

var allUserPermissions = "";
for (perm <- (res/umr("user")/permission("hasPermission"))) {
	allUserPermissions = allUserPermissions + "," + (perm/permission("javaPermissionEntry")*)
}

var rolePermissions = "";
for (role <- (res/umr("user")/sioc("has_function"))) {
	for (rolePerm <- (role/permission("hasPermission"))) {
		rolePermissions = rolePermissions + "," + (rolePerm/permission("javaPermissionEntry")*);
	}
}

        <div id="tx-content">
			
        <div class="tx-tree">
			<div class="tx-edit">
			<h3>List of Permissions for user {res/umr("user")/platform("userName")*}</h3>
			<br/>
			<form id="form1">
			<input type="hidden" name="name" value={res/umr("user")/platform("userName")*} />
			<table>
				<thead>
				<tr >
					<th></th>
					<th>Name</th>
					<th>Description</th>
					<th>Java Permission Entry</th>
				</tr>
				</thead>
				<tbody>
				{for (perm <- (res/umr("permission"))) yield {
				val javaPermission = (perm/permission("javaPermissionEntry")*);
				<tr>
					<td>{				
						if(rolePermissions.contains(javaPermission)) {
							rolePermissions = rolePermissions.replace("," + javaPermission, "")
							<input type="checkbox" checked="checked" disabled="disabled" value={javaPermission} />
						} else {
							if(allUserPermissions.contains(javaPermission)) {
								allUserPermissions = allUserPermissions.replace("," + javaPermission, "")
								if(userHasAllPermissions || allAvailablePermissions.contains(javaPermission)) {
									<input type="checkbox" checked="checked" name="permEntries" value={javaPermission} />
								} else {
									<input type="checkbox" checked="checked" disabled="disabled" value={javaPermission} />
									<input type="hidden" name="permEntries" value={javaPermission} />
								}
							} else {
								if(userHasAllPermissions || allAvailablePermissions.contains(javaPermission)) {
									<input type="checkbox" name="permEntries" value={javaPermission} />
								} else {
									<input type="checkbox" disabled="disabled" value={javaPermission} />
								}
							}
						}
						}
					</td>

					<td><span style="line-height: 1.5em;">{perm/dct("title")*}</span></td>
					<td><span style="line-height: 1.5em;">{perm/dct("description")*}</span></td>
					<td><span style="line-height: 1.5em;">{javaPermission}</span></td>
				</tr>
				}
				}
				{
				val otherUserPermissions = allUserPermissions.split(",")
				for(perm <-  otherUserPermissions) yield {
					ifx(!perm.equals("")) {
					if(userHasAllPermissions || allAvailablePermissions.contains(perm)) {
					<tr>
						<td><input type="checkbox" checked="checked" name="permEntries" value={perm} /></td>
						<td><span style="line-height: 1.5em;"></span></td>
						<td><span style="line-height: 1.5em;"></span></td>
						<td><span style="line-height: 1.5em;">{perm}</span></td>
					</tr>
					} else {
					<tr>
						<td><input type="checkbox" checked="checked" disabled="disabled" value={perm} />
							<input type="hidden" name="permEntries" value={perm} />
						</td>
						<td><span style="line-height: 1.5em;"></span></td>
						<td><span style="line-height: 1.5em;"></span></td>
						<td><span style="line-height: 1.5em;">{perm}</span></td>
					</tr>
					}
					}
				}
				}
				{
				val otherRolePermissions = rolePermissions.split(",")
				for(perm <-  otherRolePermissions) yield {
					ifx(!perm.equals("")) {
					<tr>
						<td><input type="checkbox" checked="checked" disabled="disabled" value={perm} /></td>
						<td><span style="line-height: 1.5em;"></span></td>
						<td><span style="line-height: 1.5em;"></span></td>
						<td><span style="line-height: 1.5em;">{perm}</span></td>
					</tr>
					}
				}
				}
				</tbody>
			</table>
			</form>
			<br/>
			<h2>Add new Permission manually to user {res/umr("user")/platform("userName")*}</h2>
			<form id="form2" method="post">
				<div>
					<input type="hidden" name="name" value={res/umr("user")/platform("userName")*} />
					<label>Permission Entry:
						<input type="text" name="permEntries" />
					</label>
					<a id="addButton" href="#" class="tx-button tx-button-create">Add Permission</a>
				</div>
			</form>
			<br/>
			<br/>
			</div>
        </div>
        </div>
