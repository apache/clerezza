<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us">
	<head>
		<title>Smart Content Binding: An Overview</title>
	</head>
	<body>
		<h1>Smart Content Binding: An Overview</h1>
		<p>Author: Hasan - clerezza.org</p>
		<p>Date: November 10, 2008</p>
		<p>Contributor: Reto Bachmann-Gmür - clerezza.org</p>
		<h2>Introduction</h2>
		<p>
			Smart Content Binding (SCB) is an open source framework developed by
			clerezza.org aiming primarily at providing a java implementation of the
			graph data model specified by W3C RDF [<a href="#ref1">1</a>] and
			functionalities to operate on that data model. SCB offers a service
			interface to access multiple named graphs and it can use various
			providers to manage RDF graphs in a technology specific manner, e.g.,
			using Jena [<a href="#ref2">2</a>] (TBD) or Sesame [<a href="#ref3">3</a>].
			It also provides façades that allow an application to use Jena or Sesame (TBD)
			APIs to process RDF graphs (note that the choice of a façade is independent of
                        the chosen backend; you can for example use the Jena façade to write
                        your code against the Jena API while using the Sesame provider to store
                        your data in a Sesame store).
			Furthermore, SCB offers a serialization and a parsing service to convert
			a graph into a certain representation (format) and vice versa. In order
			to support ontologies usage, SCB provides a tool to convert ontologies
			defined in various formats including RDF/XML into Java classes.
		</p>

		<h2>Architecture</h2>
		<p>
			SCB comprises the following architectural components as depicted in Fig. 1:
		</p>
		<ul>
			<li>Core</li>
			<li>Façades</li>
			<li>Utilities</li>
			<li>Storage Providers</li>
			<li>Parsing Providers</li>
			<li>Serializing Providers</li>
			<li>Ontologies Tool</li>
		</ul>
		<p>
			<img src="images/scb_architecture.png" alt="SCB Architecture"/>
			<br/><i>Figure 1: SCB Architecture</i>
		</p>
		<p>
			The Core contains interface definitions of the RDF graph data model and its
			implementation. The three main classes are <code>Graph</code>, <code>MGraph</code>,
			and <code>TripleCollection</code>. The class <code>Graph</code> represents an
			immutable RDF Graph, as such its identity criterion is defined in terms of
			graph-isomorphism. The class <code>MGraph</code> represents a mutable RDF Graph,
			which enables triples to be added to or removed from a graph. The class
			<code>TripleCollection</code> is the super class of both the class <code>Graph</code>
			and <code>MGraph</code>.
			SCB Core provides three services: <code>TcManager</code> [<a href="#ref4">4</a>] allows access to
			the various <code>TripleCollection</code>s, <code>Parser</code> [<a href="#ref5">5</a>] and
			<code>Serializer</code> [<a href="#ref6">6</a>] to allow reading and writing graphs from and to
			various formats. In an OSGi environment these services are accessed using the
			service registry or injected using OSGi Declarative Services. In a non OSGi environment
			static factory methods are used to return an instance.
			The <code>TcManager</code> delegates actual processing tasks to a specific Storage Provider
			chosen from a set of Storage Providers based on their priority number (weight).
			Storage Providers can be dynamically bound to or unbound from the Core.
			The functionality required by the Parser and Serializer is delegated to registered
			Parsing and Serializing Providers respectively, according to their capability
			(supported formats). Later registered providers shadow previous ones for the same format.
		</p>
		<p>
			The current implementation of SCB includes a Jena Façade. The Jena Façade allows an
			application to use Jena API to manipulate a TC.
		</p>
		<p>
			In order to ease operations on a resource in a TC, the Utilities component provides
			a class with a set of useful methods, e.g., to delete all triples (statements) with
			the resource as subject and a specified predicate.
		</p>
		<p>
			Finally, the Ontologies Tool contains a standalone application called SchemaGen to
			generate the Java source code with constants from an ontology description.
		</p>
		<h2>Artifacts</h2>
		<p>
			Each architectural component described above comprises one or more artifacts as
			listed in Table 1.
			<br/><br/><i>Table 1: Artifacts of each architectural components</i><br/>
		</p>
		<table border="1" cellpadding="4">
			<tr>
				<th>Architectural Component</th>
				<th>Artifact</th>
				<th>Artifact Type</th>
			</tr>
			<tr>
				<td rowspan="2">Core</td>
				<td>org.clerezza.rdf.core</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>org.clerezza.rdf.core.test</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>Façades</td>
				<td>org.clerezza.rdf.jena.facade</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>Utilities</td>
				<td>org.clerezza.rdf.utils</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td rowspan="2">Storage Providers</td>
				<td>org.clerezza.rdf.sesame.storage</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>org.clerezza.rdf.jena.storage</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>Parsing Providers</td>
				<td>org.clerezza.rdf.jena.parser</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>Serializing Providers</td>
				<td>org.clerezza.rdf.jena.serializer</td>
				<td>Jar and OSGi bundle</td>
			</tr>
			<tr>
				<td>Ontologies Tool</td>
				<td>org.clerezza.rdf.tool.schemagen</td>
				<td>Executable jar</td>
			</tr>
		</table>
		<h2>Building SCB</h2>
		<p>
			If you want to build SCB from its sources, you need JDK version 1.6 to compile.
			Maven version 2.0.9 has been used to build SCB.
		</p>
		<h2>Developing Applications using SCB</h2>
		<p>
			To develop an application on top of SCB, you need to have the Core and optionally
			Utilities and Façades.
		</p>
		<h2>Deploying an Application Requiring SCB</h2>
		<p>
			To deploy an application which uses SCB, Java(TM) SE Runtime Environment 6 or
			higher is needed. If the application does not use OSGi, then the SCB Core,
			the jars required for compilation, as well as the needed implementations
			(typically one provider for storage, serialization, and parsing) must be in
			the classpath. If the application uses OSGi, these jars are loaded as bundles,
			and to run in OSGi, Declarative Services must be enabled (see the documentation
			of your OSGi container).
		</p>
		<p>
			The use of SCB in an OSGi environment has been tested with Apache Felix [<a href="#ref7">7</a>]
			and Eclipse Equinox [<a href="#ref8">8</a>].
		</p>
		<h2>Extending and Customizing SCB</h2>
		<p>
			Since SCB applies a Service Oriented Architecture approach, following components
			can be easily extended: Storage Providers, Parsing Providers, and Serializing
			Providers. Using OSGi, new bundles just need to implement the required service
			interfaces. To be located outside an OSGi environment, they should also provide
			files in "META-INF/services" for the services they expose. Consult the SCB JavaDoc
			for more information [<a href="#ref9">9</a>].
		</p>
		<h2>References</h2>
		<p id="ref1">[1] W3C: Resource Description Framework (RDF): Concepts and Abstract Syntax; 2004, <a href="http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/">http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/</a>
		</p>
		<p id="ref2">[2] <a href="http://jena.sourceforge.net/">http://jena.sourceforge.net/</a>
		</p>
		<p id="ref3">[3] <a href="http://www.openrdf.org/">http://www.openrdf.org/</a>
		</p>
		<p id="ref4">[4] <a href="http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/index.html?org/clerezza/rdf/core/access/TcManager.html">
			http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/index.html?org/clerezza/rdf/core/access/TcManager.html</a>
		</p>
		<p id="ref5">[5] <a href="http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/org/clerezza/rdf/core/serializedform/Parser.html">
			http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/org/clerezza/rdf/core/serializedform/Parser.html</a>
		</p>
		<p id="ref6">[6] <a href="http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/org/clerezza/rdf/core/serializedform/Serializer.html">
			http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/org/clerezza/rdf/core/serializedform/Serializer.html</a>
		</p>
		<p id="ref7">[7] <a href="http://felix.apache.org/site/index.html">http://felix.apache.org/site/index.html</a>
		</p>
		<p id="ref8">[8] <a href="http://www.eclipse.org/equinox/">http://www.eclipse.org/equinox/</a>
		</p>
		<p id="ref9">[9] <a href="http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/index.html">http://clerezza.org/projects/org.clerezza.rdf.core/apidocs/index.html</a>
		</p>
	</body>
</html>